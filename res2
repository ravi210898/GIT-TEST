/*
 * grunt-html-build
 * https://github.com/spatools/grunt-html-build
 * Copyright (c) 2013 SPA Tools
 * Code below is licensed under MIT License
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

module.exports = function (grunt) {
    //#region Global Properties

    var // Init
        _ = require("lodash"),
        URL = require("url"),
        path = require("path"),
        beautifier = require("js-beautify"),
        beautify = {
            js: beautifier.js,
            css: beautifier.css,
            html: beautifier.html
        },

        // Tags Regular Expressions
        regexTagStartTemplate = "<!--\\s*%parseTag%:(\\w+)\\s*(inline)?\\s*(optional)?\\s*(recursive)?\\s*(noprocess)?\\s*([^\\s]*)\\s*(?:\\[(.*)\\])?\\s*-->", // <!-- build:{type} (inline) (optional) (recursive) {name} [attributes...] --> {} required () optional
        regexTagEndTemplate = "<!--\\s*\\/%parseTag%\\s*-->", // <!-- /build -->
        regexTagStart = "",
        regexTagEnd = "",
        isFileRegex = /\.(\w+){2,4}$/,
        processFileRegex = /\$\(([^\)]*)\)/;

    //#endregion

    //#region Private Methods

    function getBuildTags(content) {
        var lines = content.replace(/\r?\n/g, "\n").split(/\n/),
            tag = false,
            tags = [],
            last;

        lines.forEach(function (l) {
            var tagStart = l.match(new RegExp(regexTagStart)),
                tagEnd = new RegExp(regexTagEnd).test(l);

            if (tagStart) {
                tag = true;
                last = {
                    type: tagStart[1],
                    inline: !!tagStart[2],
                    optional: !!tagStart[3],
                    recursive: !!tagStart[4],
                    noprocess: !!tagStart[5],
                    name: tagStart[6],
                    attributes: tagStart[7],
                    lines: []
                };
                tags.push(last);
            }

            // switch back tag flag when endbuild
            if (tag && tagEnd) {
                last.lines.push(l);
                tag = false;
            }

            if (tag && last) {
                last.lines.push(l);
            }
        });

        return tags;
    }
    function defaultProcessPath(pathes, params, opt) { //takes an array of paths and validates them
        var local = grunt.file.expand(opt, pathes),
            flattenPaths = _.isArray(pathes) ? _.flattenDeep(pathes) : pathes,
            remote = flattenPaths.filter(function (path) { //for loading from cdn
                return /^((http|https):)?(\\|\/\/)/.test(path); //is http, https, or //
            });

        if (params.relative && opt.cwd) {
            local = local.map(function (src) { return path.join(opt.cwd, src); });
        }

        return _.uniq(local.concat(remote));
    }
    function validateBlockWithName(tag, params) {
        var src = params[tag.type + "s"],

            keys = tag.name.split("."),
            ln = keys.length;

        for (var i = 0; i < ln; i++) {
            src = src[keys[i]]; // Search target
        }

        if (src) {
            // check if we want to use current file name, if so update src where necessary
            if( params.useFileName && src.toString().match(/_CURRENT_FILE_NAME_/g) ) {
              src = src.toString().replace("_CURRENT_FILE_NAME_", processedFile);
            }
          
            var opt = {},
                files = src;

            if (_.isObject(src)) {
                if (src.files) {
                    opt = _.omit(src, "files");
                    files = src.files;
                }
                else {
                    // if paths are named, just take values
                    files = _.values(src);
                }
            }

            if (!Array.isArray(files)) {
                files = [files];
            }

            if (params.processFiles) {
                var filesContext = params.filesContext;
                files = files.map(function(f) {
                    return f.replace(processFileRegex, function(val, name) {
                        return filesContext[name] || val;
                    });
                });
            }

            return params.processPath(files, params, opt);
        }
    }
    function validateBlockAlways(tag) {
        return true;
    }

    function setTagRegexes(parseTag) {
        regexTagStart = regexTagStartTemplate.replace(/%parseTag%/, function () { return parseTag });
        regexTagEnd = regexTagEndTemplate.replace(/%parseTag%/, function () { return parseTag });
    }

    function createFilesContext(src) {
        return {
            path: src,
            dir: path.dirname(src),
            file: path.basename(src),
            filename: path.basename(src, path.extname(src)),
            dirname: path.basename(path.dirname(src)),
            platform: process.platform
        };
    }
